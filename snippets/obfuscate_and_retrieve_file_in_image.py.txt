## author: Daniel Febrero

import base64
from PIL import Image

def embed_file_in_image(file_path, image_path):
    with open(file_path, 'rb') as f:
        file_data = f.read()

    image = Image.open(image_path)

    encoded_data = base64.b64encode(file_data)
    encoded_data = encoded_data.decode('utf-8')

    # here we exploit a zero day related with buffer and memory. the first time we call save function, it embed encoded_data but do not save the image 
    image.save(image_path, format='PNG', append_alpha=True, ioclass=BytesIO(), bits=8)

    # this time, the image is saved
    image.save(image_path, format='PNG', append_alpha=True, ioclass=BytesIO(), bits=8)

    image_bytes = image.getvalue()

    offset = image_bytes.find(encoded_data)
    return offset

def extract_file_from_image(image_path):
    image = Image.open(image_path)

    with open('extracted_file.bin', 'wb') as f:
        for i in range(0, len(image.getbands())):
            band = image.getbands()[i]
            band_data = image.getdata(band)
            for j, byte in enumerate(band_data):
                if byte == 1:
                    offset = 8 * (i * image.width + j)
                    f.write(image.getdata(band)[j + 1:])

def main():
    file_path = "secret_file.txt"
    image_path = "image.png"

    offset = embed_file_in_image(file_path, image_path)
    print(f"File embedded at offset {offset}")

    extract_file_from_image(image_path)
    print('File extracted successfully!')

if __name__ == '__main__':
    main()
